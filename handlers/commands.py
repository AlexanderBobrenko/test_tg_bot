from aiogram import types
from aiogram.filters import Command
from .keyboards import get_main_keyboard
from ..mocks.auth_mock import check_token, logout, authorize_user
from ..mocks.main_module_mock import get_tests, get_test_details, get_test_questions, create_attempt, submit_answer, get_attempt_results
from ..services.redis_service import set_user_status, get_user_status, set_user_token, delete_user_session, get_user_token
import uuid

#/start
async def start_command(message: types.Message):
    chat_id = message.chat.id
    status = get_user_status(chat_id)
    print(f"/start called with status: {status}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if not status:
        set_user_status(chat_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. "
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
        reply_markup=get_main_keyboard()
    )

#/login
async def login_command(message: types.Message):
    chat_id = message.chat.id
    status = get_user_status(chat_id)
    print(f"/login called with status: {status}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if status == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π':
        set_user_status(chat_id, '–ê–Ω–æ–Ω–∏–º–Ω—ã–π')
        login_token = str(uuid.uuid4())
        set_user_token(chat_id, login_token)
        response = authorize_user(login_token)
        print(f"Authorization response: {response}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        if response["status"] == "success":
            set_user_status(chat_id, "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π")
            print(f"User {chat_id} status updated to: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            await message.answer(
                "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
                reply_markup=get_main_keyboard(is_authorized=True)
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    elif status == '–ê–Ω–æ–Ω–∏–º–Ω—ã–π':
        await message.answer("üîë –í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.")
    elif status == '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π':
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Ö–æ–¥–∏—Ç—å —Å–Ω–æ–≤–∞.")

#/logout
async def logout_command(message: types.Message):
    chat_id = message.chat.id
    refresh_token = get_user_token(chat_id)
    print(f"/logout called with token: {refresh_token}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if refresh_token:
        response = logout(refresh_token)
        print(f"Logout response: {response}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        if response["status"] == "success":
            delete_user_session(chat_id)
            print(f"User {chat_id} session deleted. New status: {get_user_status(chat_id)}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            await message.answer(
                "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                reply_markup=get_main_keyboard(is_authorized=False)
            )
    else:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

#/show_tests
async def list_tests(message: types.Message):
    tests = get_tests()
    if not tests:
        await message.answer("–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    response = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:\n"
    for test in tests:
        response += f"{test['id']}. {test['name']} ‚Äî {test['description']}\n"

    await message.answer(response)

#/test_details
async def test_details_command(message: types.Message):
    text = message.text.split()
    print(f"/test_details called with args: {text}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if len(text) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–µ—Å—Ç–∞.")
        return
    
    test_id = int(text[1])
    test = get_test_details(test_id)
    print(f"Test details: {test}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    if test:
        response = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {test['name']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {test['description']}"
    else:
        response = "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    await message.answer(response)

#/create_attempt
async def create_attempt_command(message: types.Message):
    text = message.text.split()
    print(f"/create_attempt called with args: {text}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if len(text) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–µ—Å—Ç–∞.")
        return
    
    test_id = int(text[1])
    user_id = message.from_user.id
    attempt = create_attempt(test_id, user_id)
    print(f"Attempt: {attempt}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    if attempt:
        response = f"–ü–æ–ø—ã—Ç–∫–∞ —Ç–µ—Å—Ç–∞ '{test_id}' —Å–æ–∑–¥–∞–Ω–∞. ID –ø–æ–ø—ã—Ç–∫–∏: {attempt['id']}."
    else:
        response = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏."
    
    await message.answer(response)

#/submit_answer
async def submit_answer_command(message: types.Message):
    text = message.text.split()
    if len(text) != 4:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /submit_answer <ID –ø–æ–ø—ã—Ç–∫–∏> <ID –≤–æ–ø—Ä–æ—Å–∞> <–Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞>")
        return
    
    attempt_id, question_id, answer = map(int, text[1:])
    result = submit_answer(attempt_id, question_id, answer)
    
    if result["status"] == "success":
        response = "–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç."
    else:
        response = result["message"]
    
    await message.answer(response)

#/get_results
async def get_results_command(message: types.Message):
    text = message.text.split()
    if len(text) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ø—ã—Ç–∫–∏.")
        return
    
    attempt_id = int(text[1])
    results = get_attempt_results(attempt_id)
    
    if results["status"] == "success":
        response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ø—ã—Ç–∫–∏ {attempt_id}:\n"
        for result in results["results"]:
            response += (f"–í–æ–ø—Ä–æ—Å: {result['question_text']}\n"
                         f"–í–∞—à –æ—Ç–≤–µ—Ç: {result['user_answer']}\n"
                         f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result['correct_answer']}\n"
                         f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {'–î–∞' if result['is_correct'] else '–ù–µ—Ç'}\n\n")
        response += (f"–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {results['total_correct']}\n"
                     f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {results['total_questions']}\n")
    else:
        response = results["message"]
    
    await message.answer(response)

#/help
async def help_command(message: types.Message):
    help_text = """
<b><i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i></b>\n
<i>/start</i> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
<i>/login</i> - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ
<i>/logout</i> - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
<i>/show_tests</i> - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
<i>/test_details *id —Ç–µ—Å—Ç–∞*</i> - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞
<i>/create_attempt *id —Ç–µ—Å—Ç–∞*</i> - –ù–∞—á–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É —Ç–µ—Å—Ç–∞
<i>/submit_answer *id –ø–æ–ø—ã—Ç–∫–∏* *‚Ññ –≤–æ–ø—Ä–æ—Å–∞* *‚Ññ –æ—Ç–≤–µ—Ç–∞*</i> - –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
<i>/get_results *id –ø–æ–ø—ã—Ç–∫–∏*</i> - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
\n
================================================\n
<i>/help</i> - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""
    await message.answer(help_text, parse_mode="HTML")

#button "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
async def auth_button(message: types.Message):
    chat_id = message.chat.id
    status = get_user_status(chat_id)
    print(f"auth_button called with status: {status}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if status == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π':
        await login_command(message)
    elif status == '–ê–Ω–æ–Ω–∏–º–Ω—ã–π':
        await message.answer("üîë –í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.")
    elif status == '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π':
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Ö–æ–¥–∏—Ç—å —Å–Ω–æ–≤–∞.")

#button "–¢–µ—Å—Ç—ã"
async def tests_button(message: types.Message):
    chat_id = message.chat.id
    status = get_user_status(chat_id)
    print(f"tests_button called with status: {status}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if status == '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π':
        await message.answer("üìö –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    else:
        await message.answer("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login.")

#button "–ü–æ–º–æ—â—å"
async def help_button_command(message: types.Message):
    await help_command(message)